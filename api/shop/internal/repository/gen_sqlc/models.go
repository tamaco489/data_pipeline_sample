// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UsersRole string

const (
	UsersRoleGeneral    UsersRole = "general"
	UsersRoleAdmin      UsersRole = "admin"
	UsersRoleBetaTester UsersRole = "beta_tester"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

func (e UsersRole) Valid() bool {
	switch e {
	case UsersRoleGeneral,
		UsersRoleAdmin,
		UsersRoleBetaTester:
		return true
	}
	return false
}

type UsersStatus string

const (
	UsersStatusActive   UsersStatus = "active"
	UsersStatusInactive UsersStatus = "inactive"
	UsersStatusBanned   UsersStatus = "banned"
)

func (e *UsersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersStatus(s)
	case string:
		*e = UsersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersStatus: %T", src)
	}
	return nil
}

type NullUsersStatus struct {
	UsersStatus UsersStatus `json:"users_status"`
	Valid       bool        `json:"valid"` // Valid is true if UsersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UsersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersStatus), nil
}

func (e UsersStatus) Valid() bool {
	switch e {
	case UsersStatusActive,
		UsersStatusInactive,
		UsersStatusBanned:
		return true
	}
	return false
}

type User struct {
	// Product-specific unique ID
	ID string `json:"id"`
	// Account name in the game
	Username sql.NullString `json:"username"`
	// User email address
	Email sql.NullString `json:"email"`
	// User role level
	Role UsersRole `json:"role"`
	// Determine if the account is active, inactive, or banned
	Status UsersStatus `json:"status"`
	// Last login date and time
	LastLoginAt time.Time `json:"last_login_at"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}
